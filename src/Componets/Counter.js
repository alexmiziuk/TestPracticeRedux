/* Компоненты (Components):
В файле Counter.js определен React-компонент Counter. Этот компонент подключен 
к хранилищу Redux с помощью хука useSelector, который позволяет компоненту получать
 доступ к части состояния из Redux-хранилища, и хука useDispatch, который предоставляет функцию 
 для отправки действий Redux. Компонент отображает текущее значение счетчика и три кнопки для 
 увеличения, уменьшения и установки случайного значения счетчика. */

/* 
В компоненте `Counter` применяются хуки `useSelector` и `useDispatch` из библиотеки `react-redux`, чтобы связать компонент с Redux-хранилищем. Давайте разберем, как это работает:

1. **Хук `useSelector`**:
	- Этот хук используется для выбора данных из Redux-хранилища.
	- В данном случае, он принимает функцию-селектор, которая принимает 
	текущее состояние хранилища и возвращает нужные данные. Возвращаемое значение этой 
	функции будет присвоено переменной `count`.
	- Внутри функции-селектор мы обращаемся к состоянию хранилища и выбираем из него свойство `count`, 
	которое содержит текущее значение счетчика.

2. **Хук `useDispatch`**:
	- Этот хук используется для получения функции `dispatch`, которая позволяет отправлять действия в Redux-хранилище.
	- Мы используем функции `increment`, `decrement` и `setRandom` из файла `actions.js` для 
	создания соответствующих действий и отправки их в хранилище при щелчке на кнопках в компоненте.

3. **Обработчики событий кнопок**:
	- Каждая кнопка в компоненте имеет обработчик событий `onClick`, который вызывает соответствующую 
	функцию действия и отправляет соответствующее действие в Redux-хранилище.
	- Например, при щелчке на кнопке "Увеличить", вызывается функция `dispatch(increment())`, которая отправляет
	 действие `{ type: 'INCREMENT' }` в Redux-хранилище.

Таким образом, компонент `Counter` использует данные из Redux-хранилища для отображения текущего значения
 счетчика и отправляет действия в хранилище для его обновления. Это делает возможным управление состоянием
  приложения через Redux в реактивном стиле. Когда состояние хранилища изменяется в результате действий,
	компонент автоматически перерисовывается с новыми данными, так как он подписан на изменения в Redux-хранилище 
	с помощью хука `useSelector`.
*/

import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { increment, decrement, setRandom } from '../Actions/actions';

const Counter = () => {
	const count = useSelector(state => state.count);
	const dispatch = useDispatch();
	return (
		<div>
			<h1>Счетчик: {count}</h1>
			<button onClick={() => dispatch(increment())}>Увеличить</button>
			<button onClick={() => dispatch(decrement())}>Уменьшить</button>
			<button onClick={() => dispatch(setRandom())}>Случайное значение</button>
		</div>
	);
};

export default Counter;